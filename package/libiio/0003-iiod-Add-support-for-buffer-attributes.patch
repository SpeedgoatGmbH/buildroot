From afd1e98d927999985608df589f504cb205385a6e Mon Sep 17 00:00:00 2001
From: Matt Fornero <matt.fornero@mathworks.com>
Date: Thu, 30 Nov 2017 14:37:41 -0500
Subject: [PATCH 3/5] iiod: Add support for buffer attributes

Add the BUFFER modifier to the IIOD lexicon to enable reading / writing
buffer attributes

Signed-off-by: Matt Fornero <matt.fornero@mathworks.com>
---
 iiod/lexer.l  |  5 +++++
 iiod/ops.c    | 43 ++++++++++++++++++++++++++++++-----------
 iiod/ops.h    |  6 +++---
 iiod/parser.y | 61 +++++++++++++++++++++++++++++++++++++++++++++++++----------
 4 files changed, 91 insertions(+), 24 deletions(-)

diff --git a/iiod/lexer.l b/iiod/lexer.l
index 38e6f6a..c1c0ad4 100644
--- a/iiod/lexer.l
+++ b/iiod/lexer.l
@@ -118,6 +118,11 @@ WORD (([[:alpha:]]+,)|(iio:))?(-|_|\.|[[:alnum:]])+
 	return DEBUG_ATTR;
 }
 
+<WANT_CHN_OR_ATTR>BUFFER|buffer {
+	BEGIN(WANT_ATTR);
+	return BUFFER_ATTR;
+}
+
 <WANT_CHN_OR_ATTR>INPUT|input|OUTPUT|output {
 	struct parser_pdata *pdata = yyget_extra(yyscanner);
 	pdata->channel_is_output = yytext[0] == 'o' || yytext[0] == 'O';
diff --git a/iiod/ops.c b/iiod/ops.c
index 1e4f6f4..3f783a0 100644
--- a/iiod/ops.c
+++ b/iiod/ops.c
@@ -1088,24 +1088,35 @@ ssize_t rw_dev(struct parser_pdata *pdata, struct iio_device *dev,
 }
 
 ssize_t read_dev_attr(struct parser_pdata *pdata, struct iio_device *dev,
-		const char *attr, bool is_debug)
+		const char *attr, enum iio_attr_type type)
 {
 	/* We use a very large buffer here, as if attr is NULL all the
 	 * attributes will be read, which may represents a few kilobytes worth
 	 * of data. */
 	char buf[0x10000];
-	ssize_t ret;
+	ssize_t ret = -EINVAL;
 
 	if (!dev) {
 		print_value(pdata, -ENODEV);
 		return -ENODEV;
 	}
 
-	if (is_debug)
-		ret = iio_device_debug_attr_read(dev,
+	switch (type) {
+		case IIO_ATTR_TYPE_DEVICE:
+			ret = iio_device_attr_read(dev, attr, buf, sizeof(buf) - 1);
+			break;
+		case IIO_ATTR_TYPE_DEBUG:
+			ret = iio_device_debug_attr_read(dev,
 				attr, buf, sizeof(buf) - 1);
-	else
-		ret = iio_device_attr_read(dev, attr, buf, sizeof(buf) - 1);
+			break;
+		case IIO_ATTR_TYPE_BUFFER:
+			ret = iio_device_buffer_attr_read(dev,
+							attr, buf, sizeof(buf) - 1);
+			break;
+		default:
+			ret = -EINVAL;
+			break;
+	}
 	print_value(pdata, ret);
 	if (ret < 0)
 		return ret;
@@ -1115,7 +1126,7 @@ ssize_t read_dev_attr(struct parser_pdata *pdata, struct iio_device *dev,
 }
 
 ssize_t write_dev_attr(struct parser_pdata *pdata, struct iio_device *dev,
-		const char *attr, size_t len, bool is_debug)
+		const char *attr, size_t len, enum iio_attr_type type)
 {
 	ssize_t ret = -ENOMEM;
 	char *buf;
@@ -1133,10 +1144,20 @@ ssize_t write_dev_attr(struct parser_pdata *pdata, struct iio_device *dev,
 	if (ret < 0)
 		goto err_free_buffer;
 
-	if (is_debug)
-		ret = iio_device_debug_attr_write_raw(dev, attr, buf, len);
-	else
-		ret = iio_device_attr_write_raw(dev, attr, buf, len);
+	switch (type) {
+		case IIO_ATTR_TYPE_DEVICE:
+			ret = iio_device_attr_write_raw(dev, attr, buf, len);
+			break;
+		case IIO_ATTR_TYPE_DEBUG:
+			ret = iio_device_debug_attr_write_raw(dev, attr, buf, len);
+			break;
+		case IIO_ATTR_TYPE_BUFFER:
+			ret = iio_device_buffer_attr_write_raw(dev, attr, buf, len);
+			break;
+		default:
+			ret = -EINVAL;
+			break;
+	}
 
 err_free_buffer:
 	free(buf);
diff --git a/iiod/ops.h b/iiod/ops.h
index 1956aed..107e2ca 100644
--- a/iiod/ops.h
+++ b/iiod/ops.h
@@ -19,7 +19,7 @@
 #ifndef __OPS_H__
 #define __OPS_H__
 
-#include "../iio.h"
+#include "../iio-private.h"
 #include "queue.h"
 
 #include <endian.h>
@@ -89,9 +89,9 @@ ssize_t rw_dev(struct parser_pdata *pdata, struct iio_device *dev,
 		unsigned int nb, bool is_write);
 
 ssize_t read_dev_attr(struct parser_pdata *pdata, struct iio_device *dev,
-		const char *attr, bool is_debug);
+		const char *attr, enum iio_attr_type type);
 ssize_t write_dev_attr(struct parser_pdata *pdata, struct iio_device *dev,
-		const char *attr, size_t len, bool is_debug);
+		const char *attr, size_t len, enum iio_attr_type type);
 
 ssize_t read_chn_attr(struct parser_pdata *pdata, struct iio_channel *chn,
 		const char *attr);
diff --git a/iiod/parser.y b/iiod/parser.y
index 6ab5d21..64c32b8 100644
--- a/iiod/parser.y
+++ b/iiod/parser.y
@@ -84,6 +84,7 @@ ssize_t yy_input(yyscan_t scanner, char *buf, size_t max_size);
 %token GETTRIG
 %token TIMEOUT
 %token DEBUG_ATTR
+%token BUFFER_ATTR
 %token IN_OUT
 %token CYCLIC
 %token SET
@@ -125,9 +126,9 @@ Line:
 		"\t\tOpen the specified device with the given mask of channels\n"
 		"\tCLOSE <device>\n"
 		"\t\tClose the specified device\n"
-		"\tREAD <device> DEBUG|[INPUT|OUTPUT <channel>] [<attribute>]\n"
+		"\tREAD <device> DEBUG|BUFFER|[INPUT|OUTPUT <channel>] [<attribute>]\n"
 		"\t\tRead the value of an attribute\n"
-		"\tWRITE <device> DEBUG|[INPUT|OUTPUT <channel>] [<attribute>] <bytes_count>\n"
+		"\tWRITE <device> DEBUG|BUFFER|[INPUT|OUTPUT <channel>] [<attribute>] <bytes_count>\n"
 		"\t\tSet the value of an attribute\n"
 		"\tREADBUF <device> <bytes_count>\n"
 		"\t\tRead raw data from the specified device\n"
@@ -206,7 +207,7 @@ Line:
 	}
 	| READ SPACE DEVICE END {
 		struct parser_pdata *pdata = yyget_extra(scanner);
-		if (read_dev_attr(pdata, $3, NULL, false) < 0)
+		if (read_dev_attr(pdata, $3, NULL, IIO_ATTR_TYPE_DEVICE) < 0)
 			YYABORT;
 		else
 			YYACCEPT;
@@ -214,7 +215,7 @@ Line:
 	| READ SPACE DEVICE SPACE WORD END {
 		char *attr = $5;
 		struct parser_pdata *pdata = yyget_extra(scanner);
-		ssize_t ret = read_dev_attr(pdata, $3, attr, false);
+		ssize_t ret = read_dev_attr(pdata, $3, attr, IIO_ATTR_TYPE_DEVICE);
 		free(attr);
 		if (ret < 0)
 			YYABORT;
@@ -223,7 +224,7 @@ Line:
 	}
 	| READ SPACE DEVICE SPACE DEBUG_ATTR END {
 		struct parser_pdata *pdata = yyget_extra(scanner);
-		if (read_dev_attr(pdata, $3, NULL, true) < 0)
+		if (read_dev_attr(pdata, $3, NULL, IIO_ATTR_TYPE_DEBUG) < 0)
 			YYABORT;
 		else
 			YYACCEPT;
@@ -231,7 +232,24 @@ Line:
 	| READ SPACE DEVICE SPACE DEBUG_ATTR SPACE WORD END {
 		char *attr = $7;
 		struct parser_pdata *pdata = yyget_extra(scanner);
-		ssize_t ret = read_dev_attr(pdata, $3, attr, true);
+		ssize_t ret = read_dev_attr(pdata, $3, attr, IIO_ATTR_TYPE_DEBUG);
+		free(attr);
+		if (ret < 0)
+			YYABORT;
+		else
+			YYACCEPT;
+	}
+	| READ SPACE DEVICE SPACE BUFFER_ATTR END {
+		struct parser_pdata *pdata = yyget_extra(scanner);
+		if (read_dev_attr(pdata, $3, NULL, IIO_ATTR_TYPE_BUFFER) < 0)
+			YYABORT;
+		else
+			YYACCEPT;
+	}
+	| READ SPACE DEVICE SPACE BUFFER_ATTR SPACE WORD END {
+		char *attr = $7;
+		struct parser_pdata *pdata = yyget_extra(scanner);
+		ssize_t ret = read_dev_attr(pdata, $3, attr, IIO_ATTR_TYPE_BUFFER);
 		free(attr);
 		if (ret < 0)
 			YYABORT;
@@ -285,7 +303,7 @@ Line:
 		char *len = $5;
 		unsigned long nb = atol(len);
 		struct parser_pdata *pdata = yyget_extra(scanner);
-		ssize_t ret = write_dev_attr(pdata, $3, NULL, nb, false);
+		ssize_t ret = write_dev_attr(pdata, $3, NULL, nb, IIO_ATTR_TYPE_DEVICE);
 		free(len);
 		if (ret < 0)
 			YYABORT;
@@ -296,7 +314,7 @@ Line:
 		char *attr = $5, *len = $7;
 		unsigned long nb = atol(len);
 		struct parser_pdata *pdata = yyget_extra(scanner);
-		ssize_t ret = write_dev_attr(pdata, $3, attr, nb, false);
+		ssize_t ret = write_dev_attr(pdata, $3, attr, nb, IIO_ATTR_TYPE_DEVICE);
 		free(attr);
 		free(len);
 		if (ret < 0)
@@ -308,7 +326,7 @@ Line:
 		char *len = $7;
 		unsigned long nb = atol(len);
 		struct parser_pdata *pdata = yyget_extra(scanner);
-		ssize_t ret = write_dev_attr(pdata, $3, NULL, nb, true);
+		ssize_t ret = write_dev_attr(pdata, $3, NULL, nb, IIO_ATTR_TYPE_DEBUG);
 		free(len);
 		if (ret < 0)
 			YYABORT;
@@ -319,7 +337,30 @@ Line:
 		char *attr = $7, *len = $9;
 		unsigned long nb = atol(len);
 		struct parser_pdata *pdata = yyget_extra(scanner);
-		ssize_t ret = write_dev_attr(pdata, $3, attr, nb, true);
+		ssize_t ret = write_dev_attr(pdata, $3, attr, nb, IIO_ATTR_TYPE_DEBUG);
+		free(attr);
+		free(len);
+		if (ret < 0)
+			YYABORT;
+		else
+			YYACCEPT;
+	}
+	| WRITE SPACE DEVICE SPACE BUFFER_ATTR SPACE WORD END {
+		char *len = $7;
+		unsigned long nb = atol(len);
+		struct parser_pdata *pdata = yyget_extra(scanner);
+		ssize_t ret = write_dev_attr(pdata, $3, NULL, nb, IIO_ATTR_TYPE_BUFFER);
+		free(len);
+		if (ret < 0)
+			YYABORT;
+		else
+			YYACCEPT;
+	}
+	| WRITE SPACE DEVICE SPACE BUFFER_ATTR SPACE WORD SPACE WORD END {
+		char *attr = $7, *len = $9;
+		unsigned long nb = atol(len);
+		struct parser_pdata *pdata = yyget_extra(scanner);
+		ssize_t ret = write_dev_attr(pdata, $3, attr, nb, IIO_ATTR_TYPE_BUFFER);
 		free(attr);
 		free(len);
 		if (ret < 0)
-- 
1.8.3.1

